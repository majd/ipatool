// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	http "github.com/majd/ipatool/pkg/http"
)

// MockClient is a mock of Client interface.
type MockClient[R interface{}] struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder[R]
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder[R interface{}] struct {
	mock *MockClient[R]
}

// NewMockClient creates a new mock instance.
func NewMockClient[R interface{}](ctrl *gomock.Controller) *MockClient[R] {
	mock := &MockClient[R]{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient[R]) EXPECT() *MockClientMockRecorder[R] {
	return m.recorder
}

// Send mocks base method.
func (m *MockClient[R]) Send(r http.Request) (http.Result[R], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", r)
	ret0, _ := ret[0].(http.Result[R])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder[R]) Send(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient[R])(nil).Send), r)
}
