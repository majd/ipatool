// Code generated by MockGen. DO NOT EDIT.
// Source: keychain.go

// Package keychain is a generated GoMock package.
package keychain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeychain is a mock of Keychain interface.
type MockKeychain struct {
	ctrl     *gomock.Controller
	recorder *MockKeychainMockRecorder
}

// MockKeychainMockRecorder is the mock recorder for MockKeychain.
type MockKeychainMockRecorder struct {
	mock *MockKeychain
}

// NewMockKeychain creates a new mock instance.
func NewMockKeychain(ctrl *gomock.Controller) *MockKeychain {
	mock := &MockKeychain{ctrl: ctrl}
	mock.recorder = &MockKeychainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeychain) EXPECT() *MockKeychainMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeychain) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeychainMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeychain)(nil).Get), key)
}

// Remove mocks base method.
func (m *MockKeychain) Remove(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockKeychainMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockKeychain)(nil).Remove), key)
}

// Set mocks base method.
func (m *MockKeychain) Set(key string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeychainMockRecorder) Set(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeychain)(nil).Set), key, data)
}
