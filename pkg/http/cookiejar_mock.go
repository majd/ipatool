// Code generated by MockGen. DO NOT EDIT.
// Source: cookiejar.go

// Package http is a generated GoMock package.
package http

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCookieJar is a mock of CookieJar interface.
type MockCookieJar struct {
	ctrl     *gomock.Controller
	recorder *MockCookieJarMockRecorder
}

// MockCookieJarMockRecorder is the mock recorder for MockCookieJar.
type MockCookieJarMockRecorder struct {
	mock *MockCookieJar
}

// NewMockCookieJar creates a new mock instance.
func NewMockCookieJar(ctrl *gomock.Controller) *MockCookieJar {
	mock := &MockCookieJar{ctrl: ctrl}
	mock.recorder = &MockCookieJarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieJar) EXPECT() *MockCookieJarMockRecorder {
	return m.recorder
}

// Cookies mocks base method.
func (m *MockCookieJar) Cookies(u *url.URL) []*http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookies", u)
	ret0, _ := ret[0].([]*http.Cookie)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockCookieJarMockRecorder) Cookies(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockCookieJar)(nil).Cookies), u)
}

// Save mocks base method.
func (m *MockCookieJar) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCookieJarMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCookieJar)(nil).Save))
}

// SetCookies mocks base method.
func (m *MockCookieJar) SetCookies(u *url.URL, cookies []*http.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookies", u, cookies)
}

// SetCookies indicates an expected call of SetCookies.
func (mr *MockCookieJarMockRecorder) SetCookies(u, cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookies", reflect.TypeOf((*MockCookieJar)(nil).SetCookies), u, cookies)
}
